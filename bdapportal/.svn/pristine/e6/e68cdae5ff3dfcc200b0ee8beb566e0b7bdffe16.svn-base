package com.kt.bdapportal.controller;

import java.io.IOException;
import java.io.InputStreamReader;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.JsonIOException;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.JsonParser;

@RestController
public class NdapEntityControllerTEST {
    RestTemplate restTemplate;

    private String jsonStringFromObject(Object object) throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        return mapper.writeValueAsString(object);
    }

	@RequestMapping("/ndap/createTbl.do")				
	public String createTbl(HttpServletRequest request, HttpServletResponse response) throws IOException, JsonIOException{
        restTemplate = new RestTemplate();
	    HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", MediaType.APPLICATION_JSON_VALUE);

        JSONParser parser = new JSONParser();
        Object obj;
		StringBuffer responseString = new StringBuffer();
		try {
			obj = parser.parse(new InputStreamReader(getClass().getResourceAsStream("/create.json")));
			String jsonString = this.jsonStringFromObject(obj);
        
			HttpEntity<String> httpEntity = new HttpEntity<String>(jsonString, headers);
				
			ResponseEntity<String> responseEntity = restTemplate.exchange(
					"http://localhost:8080/bdapportal/hive/metastore/event/listener/entitytype/table/eventtype/create", 
					HttpMethod.PUT, 
					httpEntity, 
					String.class
					);
			if (responseEntity.getStatusCode() == HttpStatus.OK) {
				responseString.append((String) responseEntity.getBody());
			}else{
				//System.out.println("connection error: "+responseEntity.getStatusCode());
			} 
		} catch (HttpClientErrorException e) {
			responseString.append(e.getStatusCode());
			responseString.append(e.getResponseBodyAsString());
		} catch (HttpServerErrorException e) {
			responseString.append(e.getStatusCode());
			responseString.append(e.getResponseBodyAsString());
		} catch (JsonParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return responseString.toString();
	}
	

	@RequestMapping("/ndap/alterTbl.do")						
	public String alterTbl(HttpServletRequest request, HttpServletResponse response) throws IOException, JsonIOException{
        restTemplate = new RestTemplate();
	    HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", MediaType.APPLICATION_JSON_VALUE);

        JSONParser parser = new JSONParser();
        Object obj;
		String responseString = "";
		try {
			obj = parser.parse(new InputStreamReader(getClass().getResourceAsStream("/alter.json")));
			String jsonString = this.jsonStringFromObject(obj);
        
		HttpEntity<String> httpEntity = new HttpEntity<String>(jsonString, headers);
				
			ResponseEntity<String> responseEntity = restTemplate.exchange(
					"http://localhost:8080/bdapportal/hive/metastore/event/listener/entitytype/table/eventtype/alter", 
					HttpMethod.PUT, 
					httpEntity, 
					String.class
					);
			if (responseEntity.getStatusCode() == HttpStatus.OK) {
				responseString = (String) responseEntity.getBody();
			}else{
				//System.out.println("connection error: "+responseEntity.getStatusCode());
			} 
		} catch (HttpClientErrorException e) {
			responseString += e.getStatusCode();
			responseString += e.getResponseBodyAsString();
		} catch (HttpServerErrorException e) {
			responseString += e.getStatusCode();
			responseString += e.getResponseBodyAsString();
		} catch (JsonParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return responseString;
	}

	@RequestMapping("/ndap/dropTbl.do")						
	public String dropTbl(HttpServletRequest request, HttpServletResponse response) throws IOException, JsonIOException{
        restTemplate = new RestTemplate();
	    HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", MediaType.APPLICATION_JSON_VALUE);

        JSONParser parser = new JSONParser();
        Object obj;
		String responseString = "";
		try {
			obj = parser.parse(new InputStreamReader(getClass().getResourceAsStream("/drop.json")));
			String jsonString = this.jsonStringFromObject(obj);
        
		HttpEntity<String> httpEntity = new HttpEntity<String>(jsonString, headers);
			ResponseEntity<String> responseEntity = restTemplate.exchange(
					"http://localhost:8080/bdapportal/hive/metastore/event/listener/entitytype/table/eventtype/drop", 
					HttpMethod.PUT, 
					httpEntity, 
					String.class
					);
			if (responseEntity.getStatusCode() == HttpStatus.OK) {
				responseString = (String) responseEntity.getBody();
			}else{
				//System.out.println("connection error: "+responseEntity.getStatusCode());
			} 
		} catch (HttpClientErrorException e) {
			responseString += e.getStatusCode();
			responseString += e.getResponseBodyAsString();
		} catch (HttpServerErrorException e) {
			responseString += e.getStatusCode();
			responseString += e.getResponseBodyAsString();
		} catch (JsonParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return responseString;
	}
}
